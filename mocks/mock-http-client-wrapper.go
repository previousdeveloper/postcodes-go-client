// Code generated by MockGen. DO NOT EDIT.
// Source: ../postcode/httpclient.go

// Package mock_postcode is a generated GoMock package.
package mock_postcode

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHttpClientWrapper is a mock of HttpClientWrapper interface
type MockHttpClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientWrapperMockRecorder
}

// MockHttpClientWrapperMockRecorder is the mock recorder for MockHttpClientWrapper
type MockHttpClientWrapperMockRecorder struct {
	mock *MockHttpClientWrapper
}

// NewMockHttpClientWrapper creates a new mock instance
func NewMockHttpClientWrapper(ctrl *gomock.Controller) *MockHttpClientWrapper {
	mock := &MockHttpClientWrapper{ctrl: ctrl}
	mock.recorder = &MockHttpClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpClientWrapper) EXPECT() *MockHttpClientWrapperMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHttpClientWrapper) Get(path string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockHttpClientWrapperMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpClientWrapper)(nil).Get), path)
}

// Post mocks base method
func (m *MockHttpClientWrapper) Post(param interface{}) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", param)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockHttpClientWrapperMockRecorder) Post(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpClientWrapper)(nil).Post), param)
}
